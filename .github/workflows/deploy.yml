name: Deploy to GitHub Pages with Secure Lazy Loading

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Inject Secrets with Secure Lazy Loading
        env:
          VAULT_WIF_KEY: ${{ secrets.VAULT_WIF_KEY }}
          SITE_PASSWORD: ${{ secrets.SITE_PASSWORD }}
        run: |
          echo "üîê Injecting secrets with secure lazy loading..."
          
          # V√©rifier que les secrets existent
          if [ -z "$VAULT_WIF_KEY" ]; then
            echo "‚ùå VAULT_WIF_KEY secret is not set!"
            echo "Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "Add a secret named: VAULT_WIF_KEY"
            echo "With your WIF private key as value"
            exit 1
          fi
          
          if [ -z "$SITE_PASSWORD" ]; then
            echo "‚ùå SITE_PASSWORD secret is not set!"
            echo "Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "Add a secret named: SITE_PASSWORD"
            echo "With your site password as value"
            exit 1
          fi
          
          # 1. Injecter la cl√© vault dans secure/vault.js
          echo "üîë Injecting vault key into secure/vault.js..."
          sed -i "s/__VAULT_WIF_KEY_PLACEHOLDER__/$VAULT_WIF_KEY/g" secure/vault.js
          
          # 2. Injecter le password dans secure/script.js  
          echo "üîí Injecting password into secure/script.js..."
          sed -i "s/__SITE_PASSWORD_PLACEHOLDER__/$SITE_PASSWORD/g" secure/script.js
          
          # 3. G√©n√©rer le hash SHA-256 du password pour password-check.js
          echo "üîê Generating password hash for password-check.js..."
          PASSWORD_HASH=$(echo -n "$SITE_PASSWORD" | sha256sum | cut -d' ' -f1)
          echo "Password hash: $PASSWORD_HASH"
          
          # Remplacer le hash par d√©faut dans password-check.js
          sed -i "s/passwordHash: \"9b71d224bd62f3785d96d46ad3ea3d73319bfbc2890caadae2dff72519673ca72\"/passwordHash: \"$PASSWORD_HASH\"/g" password-check.js
          
          # V√©rifier que les remplacements ont fonctionn√©
          if grep -q "__VAULT_WIF_KEY_PLACEHOLDER__" secure/vault.js; then
            echo "‚ùå Vault key placeholder replacement failed!"
            exit 1
          fi
          
          if grep -q "__SITE_PASSWORD_PLACEHOLDER__" secure/script.js; then
            echo "‚ùå Password placeholder replacement failed!"
            exit 1
          fi
          
          if grep -q "9b71d224bd62f3785d96d46ad3ea3d73319bfbc2890caadae2dff72519673ca72" password-check.js; then
            echo "‚ùå Password hash replacement failed!"
            exit 1
          fi
          
          echo "‚úÖ All secrets successfully injected with secure lazy loading"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 